package net.imglib2.jacobian;

import java.util.Arrays;

import org.ejml.data.DMatrix1Row;
import org.ejml.data.DMatrixRMaj;
import org.ejml.dense.row.mult.MatrixVectorMult_DDRM;

import jitk.spline.ThinPlateR2LogRSplineKernelTransform;
import net.imglib2.RealLocalizable;
import net.imglib2.RealPositionable;
import net.imglib2.realtransform.AffineTransform;
import net.imglib2.realtransform.AffineTransform2D;
import net.imglib2.realtransform.InvertibleRealTransform;
import net.imglib2.realtransform.ThinplateSplineTransform;
import net.imglib2.realtransform.inverse.AbstractDifferentiableRealTransform;
import net.imglib2.realtransform.inverse.DifferentiableRealTransform;
import net.imglib2.realtransform.inverse.InverseRealTransformGradientDescent;
import net.imglib2.realtransform.inverse.RealTransformFiniteDerivatives;
import net.imglib2.realtransform.inverse.WrappedIterativeInvertibleRealTransform;
import net.imglib2.util.LinAlgHelpers;

public class JacobianExp {

	public static void main(String[] args) {
		
//		forumExample();
//		initTest();

//		notInvertibleTest();
		tpsDerivativeTest();
	}

	public static void tpsDerivativeTest() {

		final double e = Math.E;
		final double logOfE = Math.log(Math.E);
		System.out.println(logOfE);
		
		final int ndims = 2;
		final double[][] srcPts = new double[][]{
				{-1.0, 0.0, 1.0, 0.0}, // x
				{0.0, -1.0, 0.0, 1.0}}; // y

		final double[][] tgtPts = new double[][]{
				{-2.0, 0.0, 2.0, 0.0}, // x
				{0.0, -2.0, 0.0, 2.0}}; // y

//		final double[][] tgtPts = new double[][]{
//				{-1.0-e, 0.0, 1.0+e, 0.0}, // x
//				{0.0, -1.0-e, 0.0, 1.0+e}}; // y
				

		final ThinPlateR2LogRSplineKernelTransform tps = new ThinPlateR2LogRSplineKernelTransform(ndims, srcPts, tgtPts, false);
		final double[] x = new double[2];
		final double[][] j = tps.jacobian(x);
		System.out.println(LinAlgHelpers.toString(j));

		

		final RealTransformFiniteDerivatives xfm = new RealTransformFiniteDerivatives(new ThinplateSplineTransform(tps));
		xfm.setStep(0.001);
		AffineTransform tmp = xfm.jacobian(x);
		final double[][] jfd = new double[2][2];
		jfd[0][0] = tmp.get(0, 0);
		jfd[0][1] = tmp.get(0, 1);
		jfd[1][0] = tmp.get(1, 0);
		jfd[1][1] = tmp.get(1, 1);

		System.out.println("");
		System.out.println(LinAlgHelpers.toString(jfd));
	}

	public static void notInvertibleTest() {

		DifferentiableSingularLinear tform = new DifferentiableSingularLinear(2, 0);
		
		final double[] tgt = new double[]{1,1};

		final double[] p = new double[]{1,1};
//		final double[] p = new double[2];


		final double[] q = new double[2];

//		Math.log(0)

//		tform.apply(p, q);
//		System.out.println(Arrays.toString(q));
		
		
		InverseRealTransformGradientDescent itgd = new InverseRealTransformGradientDescent(2, tform);	
		itgd.apply(p, q);

		System.out.println(Arrays.toString(p));
		System.out.println(Arrays.toString(q));
	}

	public static void initTest() {

		ThinplateSplineTransform tform = exampleTform();
		
//		DifferentiableAffine tform = new DifferentiableAffine(2, 1);
//		tform.set(30, 0, 0);
//		tform.set(30, 1, 1);
//		tform.set(-50, 0, 2);
//		tform.set(20, 1, 2);

		InverseRealTransformGradientDescent itgd = new InverseRealTransformGradientDescent(2, tform);

		final double[] tgt = new double[] {2677.5,14229};
		final double[] guess = new double[2];

		itgd.initialize(tgt, guess);
	}

	public static ThinplateSplineTransform exampleTform()
	{
		final double[][] srcPtsT = new double[][]{
			{2629.921913275978, 14331.012663011015},
			{14708.78012294441, 13468.362157680287},
			{14939.324028963794, 2078.3598273596012},
			{3054.221679408901, 2648.5358867659243},
			{7787.0268680945355, 8814.718050144886},
			{8147.133692765514, 6052.892744519992}};

		final double[][] tgtPtsT = new double[][]{
				{17.17370825589293, 35.20850668361047},
				{11.743211350711972, 29.853932973202387},
				{6.268707709470273, 34.521771779540785},
				{11.456231459859813, 39.89668981675896},
				{12.416256713096475, 35.08201832045142},
				{10.965328484065695, 36.058779929126864}};

		final double[][] srcPts = transpose( srcPtsT );
		final double[][] tgtPts = transpose( tgtPtsT );
		final ThinplateSplineTransform tform = new ThinplateSplineTransform(tgtPts, srcPts);
		return tform;
	}

	public static void forumExample()
	{

		final ThinplateSplineTransform tform = exampleTform();
		final double[][] pts = allGrains();

		final WrappedIterativeInvertibleRealTransform<?> wtform = new WrappedIterativeInvertibleRealTransform<>(tform);
		wtform.getOptimzer().setMaxIters(2000);
		wtform.getOptimzer().setTolerance(0.1);
		wtform.getOptimzer().setBeta(0.5);
		wtform.getOptimzer().setMaxStep(50);

		final double[] q = new double[2];
		final double[] r = new double[2];

		final InvertibleRealTransform itform = wtform.inverse();

//		int i = 0;
//		for( double[] p : pts )
//		{
//			System.out.println(Arrays.toString(p));
////			System.out.println(i);
//			itform.apply(p, q);
//			tform.apply(q, r);
//			System.out.println(Arrays.toString(q));
//			System.out.println(Arrays.toString(r));
//			System.out.println( wtform.getOptimzer().getError());
//
//			i++;
//			break;
//		}

		double[] p = pts[414];
		itform.apply(p, q);
		
		System.out.println(Arrays.toString(p));
		System.out.println(Arrays.toString(q));
		System.out.println(Arrays.toString(r));
		System.out.println( "final error: " + wtform.getOptimzer().getError());

//		final ThinplateSplineTransform tform = exampleTform();
//		final double s = InverseRealTransformGradientDescent.estimateGlobalScale(tform);
//		System.out.println( s );

	}
	
	public static double[][] transpose( final double[][] in )
	{

		final double[][] out = new double[in[0].length][in.length];
		for( int i = 0; i < in.length; i++ )
			for( int j = 0; j < in[0].length; j++ )
				out[j][i] = in[i][j];
		
		return out;
	}

	public static void blah()
	{
		final ThinplateSplineTransform tform = tform();
		final double[] x = new double[]{ 0.5, 0.5 };
		final AffineTransform j = tform.jacobian( x );

		System.out.println(
				Arrays.toString(j.getRowPackedCopy()));
		
	}
	
	public static ThinplateSplineTransform tform()
	{
		final double[][] srcPts = new double[][] {
				{ -1.0, 0.0, 1.0, 0.0, 0.0 }, 	// x
				{ 0.0, -1.0, 0.0, 1.0, 0.0 } };	// y

		double m = 9999;
		final double[][] tgtPts = new double[][] {
				{ -10 * m, 0.0, 10 * m, 0.0, 3.5 * m },	// x
				{ 0.0, -10 * m, 0.0, 10 * m, 2.0 * m } };// y

		return new ThinplateSplineTransform(srcPts, tgtPts);
	}
	
	public static double[][] allGrains()
	{
		return new double[][] {
			{2677.5,14229},
			{2759.5,9339.5},
			{9515,9845},
			{8815.5,808},
			{2372,4967.5},
			{11843.5,3319},
			{16171,8541},
			{4434,5984.5},
			{13582.5,4304},
			{6215.5,13730.5},
			{14022,3433.5},
			{13522,11876},
			{6073.5,4880},
			{1934.5,6038},
			{11646.5,4557},
			{3972,3469.5},
			{9310,4578.5},
			{15491,9431.5},
			{9286.5,5680},
			{10617.5,12223.5},
			{5094.5,1240},
			{11768,8548.5},
			{13365.5,9800},
			{3273,3776.5},
			{5457,6070},
			{11229.5,10045.5},
			{10886,2272.5},
			{10042,9994.5},
			{11155.5,13826.5},
			{12961.5,13356.5},
			{14912,5733},
			{4096.5,9160},
			{3919.5,2749.5},
			{7400,13998},
			{11467,13492.5},
			{5263,11622.5},
			{9247.5,9105},
			{1375.5,9293},
			{4605,10736.5},
			{7334,3545},
			{2367.5,11965.5},
			{14002,5394},
			{14800.5,3524.5},
			{14579.5,3535.5},
			{4581.5,5999},
			{9611,3307},
			{8656.5,2307},
			{9875.5,10130},
			{3230,9460},
			{12980.5,3361.5},
			{13259,5593},
			{7846.5,10217.5},
			{14565,10815.5},
			{5397.5,4733.5},
			{12557,11261},
			{14259.5,3162.5},
			{5225.5,6198.5},
			{2439.5,9264.5},
			{8555.5,4729},
			{8824.5,10142.5},
			{2454,12742},
			{14096.5,5624.5},
			{10313.5,12156},
			{5378.5,6332},
			{13203.5,9773},
			{12678,8505},
			{14878.5,3373.5},
			{8766,909},
			{5808.5,12663.5},
			{14271,5258},
			{8430,4861},
			{10837,4446},
			{580.5,9602},
			{5837,3744},
			{12593.5,4304},
			{6865.5,9042},
			{13872.5,5402},
			{8948,11305.5},
			{13818,12121},
			{6435.5,5644.5},
			{13086.5,12164.5},
			{12775,12124},
			{12993.5,13239.5},
			{6201.5,1404},
			{4092,2664.5},
			{12872,8696.5},
			{2971.5,10776.5},
			{3656.5,10489},
			{5225.5,12691.5},
			{9708,2446},
			{7537.5,12355},
			{10577,3431.5},
			{4135.5,1631},
			{5106.5,4806.5},
			{4939,11576.5},
			{5386.5,9136},
			{10981.5,2430.5},
			{9959,9757},
			{10591,2526},
			{6755,4475.5},
			{11539.5,11013.5},
			{4028,4505.5},
			{3772.5,9199.5},
			{5326.5,12839.5},
			{6925.5,10287},
			{10281.5,9802.5},
			{3225,4649.5},
			{3478.5,11687.5},
			{9515.5,10170.5},
			{4535,9327},
			{10773.5,12575.5},
			{14068,4237.5},
			{14009,13366},
			{14853,4094},
			{9070.5,8825.5},
			{6986,2461.5},
			{4835.5,3513.5},
			{6097.5,9036.5},
			{3737,1790},
			{13201.5,9673.5},
			{9241,2492.5},
			{9385.5,11235.5},
			{6393,13791.5},
			{3589,14016.5},
			{13599,10654},
			{11292,2186},
			{8451,14002},
			{2965.5,4735.5},
			{11018,4687},
			{3444.5,4644},
			{16058,8197},
			{2730.5,4729},
			{8002,6098},
			{9985.5,5866},
			{10524.5,3197.5},
			{9383,2345},
			{5192,10611},
			{7694.5,11322},
			{6396,13876.5},
			{14843.5,8386},
			{6342.5,10266.5},
			{1856.5,5940},
			{4627.5,11591.5},
			{6094,14123},
			{14226.5,4398.5},
			{6674.5,4879},
			{13994.5,12135.5},
			{13263.5,5322},
			{12300.5,11308.5},
			{3792,4586.5},
			{13325.5,9544},
			{13496.5,4188.5},
			{10785.5,10047},
			{2188,6221.5},
			{3392.5,9243},
			{14191.5,3570.5},
			{2702.5,12766.5},
			{15323,5634.5},
			{13805,9560.5},
			{12179,9999.5},
			{12974,11134},
			{3966.5,10422},
			{6687.5,14031},
			{11587,2336.5},
			{2822.5,12887.5},
			{5359.5,2629},
			{4700,9393.5},
			{7822.5,11473},
			{12334.5,11101},
			{15001,4256.5},
			{2132.5,10755.5},
			{4442.5,13868},
			{12064,8670},
			{8714,11421},
			{4415.5,3502.5},
			{14620,4356},
			{3620,9455},
			{3493,10726},
			{4730.5,10291.5},
			{5674,2391},
			{5161,14197.5},
			{10126,3236},
			{4140.5,3419.5},
			{13606.5,5386},
			{11138,2259},
			{11151,4485},
			{12739.5,5498.5},
			{11477,11225.5},
			{12201,11953.5},
			{10707,3222.5},
			{9734.5,5888.5},
			{11141.5,13507},
			{10998.5,3224},
			{11930.5,13525},
			{7711,10339.5},
			{5327.5,4443.5},
			{10788.5,11506.5},
			{11371,5818},
			{14709,8305.5},
			{7728.5,3568},
			{10849,8855},
			{8195.5,9039.5},
			{15219.5,13395},
			{12258.5,2181},
			{9375.5,9839.5},
			{6450.5,11687},
			{14716.5,5614},
			{15931,10401},
			{5140,6114},
			{5781,1470.5},
			{2600,11798},
			{9987.5,5681.5},
			{12020,12057.5},
			{11497,5678.5},
			{10668.5,13725},
			{8258.5,5700},
			{11680.5,4297},
			{14723.5,2365},
			{15116.5,9644},
			{6569.5,9057.5},
			{8460,12360.5},
			{3450.5,5793},
			{3823,2719},
			{13141.5,3368},
			{4903,10467},
			{4455.5,11945},
			{6522.5,12689.5},
			{4887,1337.5},
			{12415,11903.5},
			{8313.5,9017.5},
			{6477,6077},
			{12128,12230.5},
			{4736.5,2558.5},
			{9068,5684.5},
			{3729,12730},
			{12104,4431},
			{14041,11905},
			{6887.5,1262.5},
			{12935.5,4510},
			{13928.5,11002.5},
			{7216,2254.5},
			{7094.5,4536},
			{8141.5,1014},
			{14668.5,5249},
			{6310.5,4550},
			{4239.5,2509},
			{8022,11396.5},
			{8427,4599},
			{4944,6197},
			{7089,3730.5},
			{9921,2312.5},
			{7106,1340},
			{14378,5217},
			{13224.5,4463.5},
			{7590.5,13624.5},
			{9841,4666},
			{13898.5,8427.5},
			{15142,5470.5},
			{8182,12740.5},
			{12585,5430},
			{5210.5,4421.5},
			{4845,6155},
			{4646.5,4891},
			{3585,9297},
			{4724.5,3499.5},
			{5056,2575},
			{12907,11845},
			{3526,6186},
			{9258,8823},
			{12073,13701.5},
			{13672,10741.5},
			{6027.5,2661},
			{12235.5,4238},
			{2059,9170},
			{13477.5,3341},
			{7760,4888},
			{10585.5,5513},
			{6999,5743.5},
			{15399.5,9746},
			{4806,4834},
			{8921.5,12646.5},
			{15259.5,4089},
			{10553,11329.5},
			{14127.5,2252},
			{12869.5,2316},
			{9149,12533.5},
			{4502.5,12850.5},
			{8101,13945},
			{8679.5,3445},
			{10117,2421.5},
			{4986.5,10542},
			{8285.5,4801.5},
			{12001,11239.5},
			{15163.5,4011.5},
			{9943,4344},
			{8254.5,5960.5},
			{7779.5,6041},
			{9122,2376.5},
			{5232.5,1170.5},
			{7740,10108.5},
			{10637,2229},
			{7471,2404},
			{8360.5,3529},
			{8564.5,1013},
			{14205.5,13451},
			{3276.5,9337},
			{9198,9935},
			{13974,2249.5},
			{6380.5,11478.5},
			{4421,3685.5},
			{13480,13418},
			{14290.5,5337.5},
			{14907.5,2434.5},
			{13200.5,3297},
			{4601,14312.5},
			{5943.5,12489.5},
			{13271.5,3213},
			{13477.5,12127},
			{12929.5,5480.5},
			{4516.5,3460.5},
			{12383.5,5402},
			{9291.5,3486},
			{1981.5,10653},
			{11369.5,8594},
			{10254,4599.5},
			{2110,4958},
			{14521,9475},
			{8511,3519.5},
			{14468.5,9628.5},
			{15371.5,13499.5},
			{8870.5,959},
			{3684,12906.5},
			{8929,2542.5},
			{7010.5,1060.5},
			{11915,4495.5},
			{9377,12572.5},
			{10956.5,8548.5},
			{7268,9035.5},
			{4795,10198},
			{1808.5,10791.5},
			{3891.5,11763.5},
			{7382,12359},
			{6693,9984},
			{2970.5,9463},
			{12456,4574.5},
			{10536.5,4567},
			{7891.5,5721.5},
			{3714,11968},
			{14955,5369},
			{9737,9789.5},
			{13535,8382.5},
			{5783.5,3496},
			{8503,2220},
			{10346.5,8673.5},
			{10144.5,2325},
			{7469,10481},
			{15514,5607.5},
			{8177,3509},
			{14928.5,5213},
			{14199.5,5342},
			{7107.5,9159},
			{7612,2305.5},
			{6242,4717},
			{15834.5,8244.5},
			{14285,13284.5},
			{2435,10827},
			{5577.5,12671},
			{7457,9248.5},
			{5613,1301.5},
			{6114.5,10336.5},
			{10430,11390},
			{3221.5,2887},
			{4693,3329},
			{11396.5,5613.5},
			{3349.5,5859.5},
			{15579.5,13464.5},
			{14819,5424.5},
			{6386,2438},
			{2874.5,10656},
			{4143,4846},
			{4845,4593.5},
			{14966,4151.5},
			{13151,11969.5},
			{14140,5476},
			{6505,5891},
			{5834.5,5780.5},
			{9717,11503},
			{7256.5,13881},
			{15049,13324},
			{11535,9830},
			{8505,13673.5},
			{15466.5,4276},
			{14571,5470.5},
			{5066,4597.5},
			{10669.5,9823},
			{12838.5,5447},
			{8102,10256},
			{15683.5,10860},
			{4126,10371.5},
			{14877.5,8626},
			{6729,10484},
			{15475.5,5221.5},
			{13380.5,4186.5},
			{10603,11532},
			{13113,2332},
			{12957,2193.5},
			{8790.5,6020},
			{12321,3259.5},
			{4985.5,11727},
			{4055.5,11734.5},
			{10467.5,9747},
			{4190,6010.5},
			{11037,4502},
			{15331,4365.5},
			{14301.5,13138},
			{6370,3533},
			{13550.5,9838.5},
			{12528,2214.5},
			{1961,9412},
			{3128,12938},
			{7822.5,807.5},
			{4056.5,11922},
			{8849,9083},
			{13212.5,4241},
			{7355.5,6020},
			{2944,10583.5},
			{9893,2549},
			{4064,1413.5},
			{10818.5,2454.5},
			{13420.5,11078},
			{6638.5,2366.5},
			{3674.5,2812.5},
			{14871,5592.5},
			{9010,2438},
			{14165,8421},
			{6717.5,9164.5},
			{2670.5,6177.5},
			{9393,12264.5},
			{10189.5,5860},
			{8573,8897},
			{7133.5,10307.5},
			{10097,3377.5},
			{3880.5,1371.5},
			{2956.5,2663.5},
			{4917.5,12762.5},
			{15599.5,9625.5},
			{11918,8928.5},
			{9469,5846.5},
			{7158,3440},
			{6588,10185},
			{12433,8854},
			{955.5,9381},
			{10055,4445.5},
			{10095.5,5710.5},
			{8802.5,3616.5},
			{5082.5,5943},
			{7431,12682},
			{9680,3507.5},
			{2084,10872.5},
			{4879.5,10286},
			{10527,13577},
			{9540.5,2507.5},
			{8807,9881},
			{15424.5,11791},
			{7772,8890.5},
			{4361,12984},
			{4116,12826},
			{12684,13438.5},
			{4809.5,10664.5},
			{6081.5,1183},
			{5156,2618},
			{8911,3580.5},
			{15921,10858},
			{16349.5,8398},
			{2605.5,10659},
			{11731.5,2150},
			{2878.5,11735},
			{9396.5,10055},
			{2424.5,4781},
			{7081,1186.5},
			{736,9296},
			{15016.5,9468.5},
			{9917,4591},
			{14298.5,2402.5},
			{12250.5,13355},
			{12246,9734.5},
			{5221.5,1360.5},
			{2673,4642},
			{7913,4950.5},
			{8233,11291},
			{2197.5,4848},
			{11883,11146},
			{8395,942},
			{14840.5,5310.5},
			{6016.5,6068},
			{3941,12962.5},
			{5045,2670.5},
			{15501,12132.5},
			{8471,8808.5},
			{5170.5,13748},
			{15024,8336},
			{14922.5,13256},
			{14740,2467},
			{8238,12432},
			{14564.5,2347.5},
			{7956,9044},
			{14360.5,4089.5},
			{10268,8931},
			{7884.5,2479},
			{10035,13456.5},
			{3188.5,14288},
			{13701,2193.5},
			{7553.5,11497.5},
			{5915.5,4665.5},
			{8268.5,2214.5},
			{3826,4927},
			{6350,9131},
			{2878,10430.5},
			{8177,3331},
			{9493.5,3580.5},
			{3104.5,4593.5},
			{15057,3452},
			{2277.5,10768.5},
			{11905.5,9791.5},
			{14738.5,10897},
			{11024,5564.5},
			{12073,2389},
			{8658.5,8803.5},
			{13702,10645.5},
			{3696,6196.5},
			{14151.5,9683},
			{5530,2512.5},
			{5884.5,8970},
			{15162,13148.5},
			{14399.5,4455},
			{13698,11844.5},
			{2552,10799},
			{2982,3520.5},
			{11115,2414.5},
			{13453,4484.5},
			{15414.5,8430.5},
			{5536.5,11463},
			{10406,13827},
			{8865,11552},
			{9177,12356},
			{4792,3424},
			{8662,10008.5},
			{3429.5,2814.5},
			{14787.5,13294.5},
			{8902,13589.5},
			{7621,9142},
			{12517,9896},
			{9951,3322.5},
			{10920.5,5722.5},
			{5456,12463.5},
			{5646.5,10607},
			{2394.5,12064},
			{5707.5,11858.5},
			{13057.5,11080},
			{8033.5,967.5},
			{5610.5,4572.5},
			{12795,4198.5},
			{1771.5,9395.5},
			{3329.5,10741.5},
			{5928,13986},
			{13370.5,13136},
			{12671.5,10954.5},
			{9426.5,5675.5},
			{3568.5,4860.5},
			{10396,10083.5},
			{15226.5,8499},
			{4819,9212},
			{5036.5,9296.5},
			{1665,9147},
			{14058,9490.5},
			{12687.5,9914},
			{7148.5,2490},
			{12358.5,8519.5},
			{7445.5,2552.5},
			{8637,4539},
			{7980,2504.5},
			{15753,9711.5},
			{14757,4089},
			{10118.5,2628.5},
			{6902.5,10521.5},
			{14879.5,10645},
			{7251,3705},
			{11493.5,3374},
			{3634.5,9075.5},
			{3104,9313.5},
			{11069.5,11268.5},
			{14801.5,13446},
			{15364,9349},
			{4800.5,2685.5},
			{14771,11808},
			{5686,4740},
			{12142.5,3407.5},
			{1901,10992},
			{10919,11337.5},
			{8570,4839},
			{14897.5,10472},
			{3096.5,12005},
			{8263,936},
			{6565,5758.5},
			{9796.5,13771},
			{13856.5,3291.5},
			{6948.5,9152.5},
			{4320.5,6138.5},
			{4461.5,10742.5},
			{13520.5,8715.5},
			{6438,13671},
			{4277.5,2706.5},
			{7616,4627},
			{13573,9651},
			{5222,10343.5},
			{2254,4606.5},
			{11445,5661.5},
			{2519.5,14087.5},
			{11221,5456.5},
			{8179,10104},
			{14275.5,12211},
			{11120.5,8725},
			{6328,12463.5},
			{4726.5,12998},
			{8562.5,11299},
			{2890,9297.5},
			{5330.5,1127},
			{4082.5,9421},
			{6643,3688},
			{9199.5,5997.5},
			{11055,10090.5},
			{6221,5872},
			{14459.5,10975.5},
			{4698,6129},
			{6513,4428.5},
			{8755,5764.5},
			{9807.5,5701.5},
			{3971.5,10688.5},
			{6236,12710.5},
			{10043,3513.5},
			{10924.5,3418},
			{10296,5521.5},
			{6468,1182.5},
			{1774.5,6015.5},
			{11810,11978.5},
			{7391,4508},
			{11675.5,8913},
			{13241.5,8697},
			{9228.5,3467},
			{8381.5,10203},
			{15161.5,9437.5},
			{11535,10075.5},
			{6254.5,4475},
			{2980.5,2949.5},
			{12529.5,3297.5},
			{3890,5943},
			{3472,3535.5},
			{994.5,9565.5},
			{2374.5,11778},
			{9318,5876},
			{11823,13648.5},
			{11280,4724.5},
			{8382.5,2444.5},
			{12581.5,4456.5},
			{6915.5,11594.5},
			{11585,4295.5},
			{11062,9693.5},
			{9665,4456},
			{5351,11900},
			{5564.5,5803.5},
			{9318.5,4799.5},
			{14455.5,8596.5},
			{7391,4752.5},
			{11887,5407.5},
			{3588.5,2743},
			{10287.5,9566.5},
			{10132.5,9710},
			{5099,4455.5},
			{7488,10176},
			{6688.5,11558.5},
			{9748,4645},
			{15554.5,11916.5},
			{12077.5,4105},
			{7715.5,2520},
			{5400.5,1427.5},
			{11964,11338.5},
			{13667.5,3349},
			{15364.5,4278},
			{15870.5,9333.5},
			{12960.5,9834},
			{12315,3481},
			{6465,1334.5},
			{5866,9269},
			{8609.5,11494.5},
			{1200.5,9628},
			{4309.5,9353},
			{10068.5,13784},
			{3119,11696.5},
			{14558.5,5356.5},
			{8764,12785.5},
			{8528,12678.5},
			{2405.5,5938.5},
			{6769,13830.5},
			{4696.5,3741.5},
			{5039,3506.5},
			{10421,2472},
			{7140,4816.5},
			{16107,8413},
			{1789.5,10508},
			{13905,4335},
			{5209.5,3610.5},
			{5435,10701.5},
			{4706,14196},
			{11610,3244},
			{15685.5,9364.5},
			{13427,3155.5},
			{7030.5,3450.5},
			{6187,5996.5},
			{9451.5,8808.5},
			{3280,13978.5},
			{3154,14009.5},
			{5485.5,14153},
			{3818.5,1598},
			{6637.5,5898.5},
			{3434,1511.5},
			{13285,9669.5},
			{10841.5,4654.5},
			{7466,3610.5},
			{10814.5,12296.5},
			{12599,5686.5},
			{3050.5,10371},
			{7447,3427},
			{14653.5,8727},
			{5636.5,13748},
			{14922,10828},
			{8854.5,2601},
			{6155,3559.5},
			{15273.5,10776.5},
			{13003,5364},
			{11453,4702},
			{5195,9388.5},
			{14216,11029},
			{9769.5,3497},
			{15197.5,5279.5},
			{2282.5,9231.5},
			{800,9703},
			{12372,5603.5},
			{12557,11994},
			{5996,9258},
			{1339.5,9500},
			{6296.5,10476},
			{14596.5,13491.5},
			{12421,4160},
			{11812.5,9980},
			{5434,2616.5},
			{14218,9578.5},
			{6736,13588},
			{14468,11994.5},
			{11977,3395.5},
			{11667.5,2298.5},
			{12800.5,3174},
			{13322,10864},
			{5853.5,2421},
			{15902,11850},
			{11157,12263.5},
			{14914,4213.5},
			{6408,4626.5},
			{8827,2330.5},
			{10180,11375},
			{13659,13543.5},
			{3130,10695},
			{11352,4472},
			{12939.5,4267},
			{8151,2395.5},
			{6119,4473.5},
			{6637,13771.5},
			{7961,8816.5},
			{5718.5,6021},
			{6518.5,10329.5},
			{7014.5,13819},
			{13048.5,8588.5},
			{8087,4627.5},
			{13143.5,3069.5},
			{11741,4334},
			{11116.5,5744.5},
			{10499.5,12396},
			{12001,3172.5},
			{2328,9503},
			{5860,12879.5},
			{10679.5,3349.5},
			{14617,3378.5},
			{5898,3671},
			{5669,9300},
			{7774.5,1090.5},
			{4002.5,4770.5},
			{14939.5,8100},
			{747,9422.5},
			{13965.5,13301.5},
			{11270,5623.5},
			{3382,3493},
			{15048.5,12081},
			{7452,1087.5},
			{4477,9144},
			{4328.5,9289.5},
			{11228.5,11359},
			{12557.5,8600.5},
			{9671.5,8770},
			{8279.5,13822.5},
			{12230.5,8816.5},
			{2534,10540.5},
			{14358.5,5499},
			{14649.5,11993},
			{11250.5,3412.5},
			{8260.5,3406.5},
			{9940.5,8903.5},
			{5068,13981},
			{4016,3684},
			{9129,5537.5},
			{15714,10694.5},
			{10543.5,8597},
			{4190.5,12726},
			{3624.5,6123},
			{9105.5,10086},
			{6519,3560},
			{2142,6086},
			{15430.5,10706.5},
			{16010.5,9610},
			{15009,5650},
			{8352.5,13556.5},
			{4591.5,3763},
			{9504,11509.5},
			{15579.5,8162.5},
			{14677.5,10567},
			{6041.5,3533.5},
			{2479,6090},
			{15313.5,12142},
			{11276,4363.5},
			{4619.5,10535.5},
			{4962.5,1502.5},
			{10580,2144},
			{4322,9155},
			{3733,4689},
			{6495,2570.5},
			{8314,10031.5},
			{5757,14097.5},
			{3628.5,10695},
			{7099,12568.5},
			{11145,8586},
			{4428.5,12674.5},
			{12819,2169.5},
			{7761.5,2334},
			{594.5,9420},
			{4300.5,1576},
			{7319,5835.5},
			{10224,12491.5},
			{2779.5,2790.5},
			{11430.5,2241.5},
			{2724,13894},
			{8273,1047.5},
			{11945,5521},
			{14490,3311.5},
			{6739,5850.5},
			{12412,3393},
			{3565,1621},
			{9836.5,5617.5},
			{9427,4778.5},
			{5575,4876},
			{8105,5756},
			{5021,4696},
			{9041.5,4865},
			{4498.5,2599},
			{2539.5,9204.5},
			{14364.5,10712},
			{3045,11811.5},
			{2914,14097.5},
			{8312.5,8793},
			{3269,4830},
			{11002,9844},
			{15857.5,8556.5},
			{3707.5,14196},
			{3070,2887},
			{8810,3547},
			{14646,4166.5},
			{6391.5,4471},
			{8565,2464.5},
			{10438.5,8904},
			{7608,3446},
			{10402,5807.5},
			{3150.5,1644.5},
			{12559,2321.5},
			{13929.5,9924.5},
			{13491,5541.5},
			{6335,11732},
			{12585.5,8830},
			{11345.5,12229.5},
			{5834,6026.5},
			{6346,12784.5},
			{11628.5,2155.5},
			{10546.5,8773},
			{10514.5,2229},
			{10708.5,5898},
			{12756.5,2419.5},
			{4540,6288.5},
			{14295.5,8668.5},
			{7704,13792.5},
			{10683,5652.5},
			{13020.5,13733},
			{6017.5,13814},
			{12692,11968},
			{6983.5,12384},
			{8656,10238},
			{6025,11559.5},
			{4765,13809},
			{15160.5,11919},
			{12865,13306.5},
			{4900,3661.5},
			{5518.5,11636.5},
			{9172.5,13944},
			{11207.5,2480},
			{5224.5,9063},
			{13191,10934},
			{13294.5,2502.5},
			{2732.5,10834.5},
			{8677,12568},
			{6095.5,2509},
			{12317,2315.5},
			{13948,8581.5},
			{3434,12703.5},
			{12417,13604.5},
			{10321.5,4448},
			{9701.5,12438.5},
			{13435,2164.5},
			{13746.5,3193.5},
			{15004.5,2134.5},
			{2080.5,6024},
			{8374,2142},
			{10721.5,8766},
			{9001,13834.5},
			{9560.5,4702.5},
			{13620.5,11012.5},
			{13031.5,4271},
			{2380,10595.5},
			{9193.5,11505.5},
			{6659.5,8894},
			{11203,11194.5},
			{9103.5,1027.5},
			{12798.5,3329},
			{4489.5,11574.5},
			{11851,4283.5},
			{4865,2524.5},
			{5987,10551},
			{2380,9389.5},
			{7488,12305},
			{12684,3354.5},
			{3582,11815.5},
			{6626.5,12521.5},
			{11050.5,12398},
			{4993,9120.5},
			{6567,2616.5},
			{8910,12408.5},
			{13964,3299.5},
			{6809,12550.5},
			{14689.5,12194},
			{8401,11460},
			{5818.5,2623},
			{12494,9624},
			{9455,3381.5},
			{7759.5,5819.5},
			{2797.5,6011},
			{15859,10594.5},
			{3853.5,13828},
			{2224.5,4974},
			{2221,9558},
			{14016,3104},
			{8770,8766},
			{14778,4230},
			{15262,9605},
			{12298,9999.5},
			{15106.5,4380.5},
			{16045.5,12032.5},
			{3872,2559},
			{1048.5,9261.5},
			{3778,10349},
			{13129.5,3256},
			{5375.5,6253.5},
			{12414.5,12167.5},
			{11964.5,5615.5},
			{10623.5,11197.5},
			{5513.5,10471},
			{8723,13775},
			{3432,9483},
			{11592,12230.5},
			{11108,3315},
			{9725,11268.5},
			{6108,12597.5},
			{10211,13648},
			{3975.5,9195},
			{8543,5758},
			{4299.5,14086},
			{10255,3498},
			{4757.5,11824.5},
			{13761,13202},
			{15547,13255},
			{11419,8798.5},
			{13482.5,5415.5},
			{11808,2389},
			{4276,10652.5},
			{11901,9603.5},
			{15213,3351},
			{12253.5,4414},
			{13325.5,8384},
			{9905.5,11531},
			{3776,9491},
			{14635,9673.5},
			{6042.5,5766},
			{13953,11818},
			{14945.5,11924},
			{10859.5,3302.5},
			{8085,6051.5},
			{2857.5,4851},
			{13384,13486},
			{5610.5,2600.5},
			{12760,4363},
			{2541,4912},
			{7611,12584.5},
			{12289.5,2414.5},
			{2557,9420},
			{7965.5,3619.5},
			{3045,3813},
			{14089.5,10767},
			{8052.5,3645.5},
			{11663,9741},
			{5333.5,9362.5},
			{2375.5,5845.5},
			{11862.5,12189},
			{9507,8981.5},
			{6351.5,6171.5},
			{8037.5,13726},
			{10833.5,13485.5},
			{7796,3399},
			{12366,2172.5},
			{15674.5,5438.5},
			{12093.5,2251},
			{2054,11969.5},
			{4564.5,4615.5},
			{4580.5,10336.5},
			{3240.5,9108},
			{7369.5,11540},
			{15559,8567.5},
			{9141,4572.5},
			{7302,10359},
			{4025.5,1679},
			{8479,10020},
			{8651,9083},
			{2730,10465},
			{11543.5,11358.5},
			{6813.5,2408.5},
			{13755.5,5587.5},
			{2922,3866},
			{6264.5,3423},
			{11601,12097.5},
			{9997.5,12632.5},
			{3443.5,13831},
			{4555.5,1626},
			{3982.5,14154.5},
			{9982,12279},
			{15842,10449},
			{6030,3410.5},
			{2160,10639},
			{8256,2432},
			{10932,5518},
			{6909,4830.5},
			{16110.5,10586},
			{4803.5,4899},
			{7513.5,9020.5},
			{6792.5,3502},
			{5842,10310.5},
			{9562,5694},
			{13148,5432},
			{11396,9877.5}
		};
	}
	
	private static class DifferentiableAffine extends AffineTransform implements DifferentiableRealTransform
	{
		final DMatrixRMaj jacobianMtx;
		
		public DifferentiableAffine(final int n, final double s) {

			super(n);
			jacobianMtx = new DMatrixRMaj(n, n);

			for (int i = 0; i < n; i++)
				this.set(s, i, i);

			for (int i = 0; i < n; i++)
				for (int j = 0; j < n; j++)
					jacobianMtx.set(i, j, this.get(i, j));
		}

		@Override
		public void directionToward( final double[] displacement, final double[] x, final double[] y )
		{
			RealTransformFiniteDerivatives.directionToward( jacobian( x ), displacement, x, y );
		}

		@Deprecated
		public AffineTransform jacobian( final double[] x )
		{
			throw new UnsupportedOperationException("not implemented");
		}

		@Override
		public DMatrixRMaj jacobianMatrix(final double[] x)
		{
			return jacobianMtx;
		}

		@Override
		public DifferentiableAffine copy()
		{
			return new DifferentiableAffine(numDimensions(), this.get(0, 0));
		}
	}
	
	private static class DifferentiableSingularLinear extends AbstractDifferentiableRealTransform
	{
		final DMatrixRMaj mtx;
		
		final DMatrixRMaj p, q;
		
		public DifferentiableSingularLinear(final int n, final double s) {

			super( n );
			mtx = new DMatrixRMaj(n, n);

			for (int i = 0; i < n; i++)
				mtx.set(i, i, s);

			p = new DMatrixRMaj(n,n);
			q = new DMatrixRMaj(n,n);
		}

//		@Override
//		public void directionToward( final double[] displacement, final double[] x, final double[] y )
//		{
////			RealTransformFiniteDerivatives.directionToward( jacobian( x ), displacement, x, y );
//
//
//			RealTransformFiniteDerivatives.directionToward( jacobianMatrix( x ), displacement, x, y );
//		}

		@Deprecated
		public AffineTransform jacobian( final double[] x )
		{
			throw new UnsupportedOperationException("not implemented");
		}

		@Override
		public DMatrixRMaj jacobianMatrix(final double[] x)
		{
			return mtx;
		}

		@Override
		public DifferentiableAffine copy()
		{
			return new DifferentiableAffine(super.n, mtx.get(0, 0));
		}

		@Override
		public int numSourceDimensions() {

			return super.n;
		}

		@Override
		public int numTargetDimensions() {

			return super.n;
		}

		@Override
		public void apply(double[] source, double[] target) {

			MatrixVectorMult_DDRM.mult(mtx, DMatrixRMaj.wrap(super.n, 1, source), DMatrixRMaj.wrap(super.n, 1, target));
		}

		@Override
		public void apply(RealLocalizable source, RealPositionable target) {

			for (int i = 0; i < source.numDimensions(); i++)
				p.set(i, source.getDoublePosition(i));

			MatrixVectorMult_DDRM.mult(mtx, p, q);

			for (int i = 0; i < target.numDimensions(); i++)
				target.setPosition(q.get(i), i);

		}
	}

}
